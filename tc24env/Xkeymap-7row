xkb_keymap {
xkb_keycodes "55y9003" {
    minimum = 8;
    maximum = 255;
     <ESC> = 9;
    <AE01> = 10;
    <AE02> = 11;
    <AE03> = 12;
    <AE04> = 13;
    <AE05> = 14;
    <AE06> = 15;
    <AE07> = 16;
    <AE08> = 17;
    <AE09> = 18;
    <AE10> = 19;
    <AE11> = 20;
    <AE12> = 21;
    <BKSP> = 22;
     <TAB> = 23;
    <AD01> = 24;
    <AD02> = 25;
    <AD03> = 26;
    <AD04> = 27;
    <AD05> = 28;
    <AD06> = 29;
    <AD07> = 30;
    <AD08> = 31;
    <AD09> = 32;
    <AD10> = 33;
    <AD11> = 34;
    <AD12> = 35;
    <RTRN> = 36;
    <LCTL> = 37;
    <AC01> = 38;
    <AC02> = 39;
    <AC03> = 40;
    <AC04> = 41;
    <AC05> = 42;
    <AC06> = 43;
    <AC07> = 44;
    <AC08> = 45;
    <AC09> = 46;
    <AC10> = 47;
    <AC11> = 48;
    <TLDE> = 49;
    <LFSH> = 50;
    <BKSL> = 51;
    <AB01> = 52;
    <AB02> = 53;
    <AB03> = 54;
    <AB04> = 55;
    <AB05> = 56;
    <AB06> = 57;
    <AB07> = 58;
    <AB08> = 59;
    <AB09> = 60;
    <AB10> = 61;
    <RTSH> = 62;
    <KPMU> = 63;
    <LALT> = 64;
    <SPCE> = 65;
    <CAPS> = 66;
    <FK01> = 67;
    <FK02> = 68;
    <FK03> = 69;
    <FK04> = 70;
    <FK05> = 71;
    <FK06> = 72;
    <FK07> = 73;
    <FK08> = 74;
    <FK09> = 75;
    <FK10> = 76;
    <NMLK> = 77;
    <SCLK> = 78;
     <KP7> = 79;
     <KP8> = 80;
     <KP9> = 81;
    <KPSU> = 82;
     <KP4> = 83;
     <KP5> = 84;
     <KP6> = 85;
    <KPAD> = 86;
     <KP1> = 87;
     <KP2> = 88;
     <KP3> = 89;
     <KP0> = 90;
    <KPDL> = 91;
    <FK11> = 95;
    <FK12> = 96;
    <KPEN> = 104;
    <RCTL> = 105;
    <KPDV> = 106;
    <PRSC> = 107;
    <RALT> = 108;
    <LNFD> = 109;
    <HOME> = 110;
      <UP> = 111;
    <PGUP> = 112;
    <LEFT> = 113;
    <RGHT> = 114;
     <END> = 115;
    <DOWN> = 116;
    <PGDN> = 117;
     <INS> = 118;
    <DELE> = 119;
    <MUTE> = 121;
    <VOL-> = 122;
    <VOL+> = 123;
    <POWR> = 124;
    <KPEQ> = 125;
    <I126> = 126;
    <PAUS> = 127;
    <I128> = 128;
    <I129> = 129;
    <LWIN> = 133;
    <COMP> = 135;
    <STOP> = 136;
    <AGAI> = 137;
    <PROP> = 138;
    <UNDO> = 139;
    <FRNT> = 140;
    <COPY> = 141;
    <OPEN> = 142;
    <PAST> = 143;
    <FIND> = 144;
     <CUT> = 145;
    <HELP> = 146;
    <I147> = 147;
    <I148> = 148;
    <I150> = 150;
    <I151> = 151;
    <I152> = 152;
    <I153> = 153;
    <I155> = 155;
    <I156> = 156;
    <I157> = 157;
    <I158> = 158;
    <I159> = 159;
    <I160> = 160;
    <I161> = 161;
    <I162> = 162;
    <I163> = 163;
    <I164> = 164;
    <I165> = 165;
    <I166> = 166;
    <I167> = 167;
    <I169> = 169;
    <I170> = 170;
    <I171> = 171;
    <I172> = 172;
    <I173> = 173;
    <I174> = 174;
    <I175> = 175;
    <I176> = 176;
    <I177> = 177;
    <I179> = 179;
    <I180> = 180;
    <I181> = 181;
    <I182> = 182;
    <I185> = 185;
    <I186> = 186;
    <I187> = 187;
    <I188> = 188;
    <I189> = 189;
    <I190> = 190;
    <FK13> = 191;
    <FK14> = 192;
    <FK15> = 193;
    <FK16> = 194;
    <FK17> = 195;
    <FK18> = 196;
    <FK20> = 198;
    <FK21> = 199;
    <FK22> = 200;
    <FK23> = 201;
    <I208> = 208;
    <I209> = 209;
    <I210> = 210;
    <I211> = 211;
    <I212> = 212;
    <I213> = 213;
    <I214> = 214;
    <I215> = 215;
    <I216> = 216;
    <I218> = 218;
    <I220> = 220;
    <I223> = 223;
    <I224> = 224;
    <I225> = 225;
    <I226> = 226;
    <I227> = 227;
    <I228> = 228;
    <I229> = 229;
    <I231> = 231;
    <I232> = 232;
    <I233> = 233;
    <I234> = 234;
    <I235> = 235;
    <I236> = 236;
    <I237> = 237;
    <I238> = 238;
    <I239> = 239;
    <I240> = 240;
    <I241> = 241;
    <I242> = 242;
    <I243> = 243;
    <I244> = 244;
    <I245> = 245;
    <I246> = 246;
    <I254> = 254;
    <I255> = 255;
    virtual indicator 1 = "AltGr";
    virtual indicator 2 = "Mode Switch";
    virtual indicator 3 = "Scroll Lock";
    virtual indicator 4 = "Compose";
    virtual indicator 5 = "Num Lock";
    //indicator 1 = "Caps Lock";
    //indicator 2 = "Num Lock";
    //indicator 3 = "Scroll Lock";
    //indicator 4 = "Compose";
    //virtual indicator 5 = "AltGr";
    //virtual indicator 6 = "Mode Switch";
    //virtual indicator 7 = "Mouse Keys";
    alias <AC12> = <BKSL>;
    alias <MENU> = <COMP>;
    alias <HZTG> = <TLDE>;
    alias <ALGR> = <RALT>;
    alias <KPPT> = <I129>;
    alias <LatQ> = <AD01>;
    alias <LatW> = <AD02>;
    alias <LatE> = <AD03>;
    alias <LatR> = <AD04>;
    alias <LatT> = <AD05>;
    alias <LatY> = <AD06>;
    alias <LatU> = <AD07>;
    alias <LatI> = <AD08>;
    alias <LatO> = <AD09>;
    alias <LatP> = <AD10>;
    alias <LatA> = <AC01>;
    alias <LatS> = <AC02>;
    alias <LatD> = <AC03>;
    alias <LatF> = <AC04>;
    alias <LatG> = <AC05>;
    alias <LatH> = <AC06>;
    alias <LatJ> = <AC07>;
    alias <LatK> = <AC08>;
    alias <LatL> = <AC09>;
    alias <LatZ> = <AB01>;
    alias <LatX> = <AB02>;
    alias <LatC> = <AB03>;
    alias <LatV> = <AB04>;
    alias <LatB> = <AB05>;
    alias <LatN> = <AB06>;
    alias <LatM> = <AB07>;
};

xkb_types "55y9003" {
    //include "complete"
    virtual_modifiers ScrollLock,NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,AltGr,Meta,Super;

    type "ONE_LEVEL" {
        modifiers= none;
    };
    type "TWO_LEVEL" {
        modifiers = Shift+Lock;
        map[Shift] = Level2;
        map[Shift+Lock] = Level2;
    };
    type "ALPHABETIC" {
        modifiers= Shift+Lock;
        map[Shift]= Level2;
        map[Lock]= Level2;
    };
    type "PC_CONTROL_LEVEL2" {
        modifiers= Control;
        map[Control]= Level2;
    };
    type "PC_ALT_LEVEL2" {
        modifiers= Alt;
        map[Alt]= Level2;
    };
    type "PC_SUPER_LEVEL2" {
        modifiers= Super;
        map[Super]= Level2;
    };
    type "CTRL+ALT" {
        modifiers= Shift+Control+Alt+LevelThree;
        map[Shift]= Level2;
        preserve[Shift]= Shift;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        preserve[Shift+LevelThree]= Shift;
        map[Control+Alt]= Level5;
    };
};

xkb_compatibility "55y9003" {

    virtual_modifiers ScrollLock,NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,AltGr,Meta,Super;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;
    interpret Shift_Lock+AnyOf(Shift+Lock) {
        action= LockMods(modifiers=Shift);
    };
    interpret Alt_L+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Alt_R+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_L+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Num_Lock{
        virtualModifier= NumLock;
        action= LockMods(modifiers=NumLock);
    };
    interpret Scroll_Lock+AnyOf(all) {
        virtualModifier= ScrollLock;
        action= LockMods(modifiers=Mod5+ScrollLock);
    };
    interpret Mode_switch+AnyOf(all) {
        virtualModifier= LevelThree;
        action= SetGroup(group=+1);
    };
    interpret ISO_Level3_Shift+AnyOf(all) {
        virtualModifier= AltGr;
        action= SetGroup(group=+2);
    };
    interpret KP_1+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret KP_End+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+1);
    };
    interpret KP_2+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=+1);
    };
    interpret KP_Down+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=+1);
    };
    interpret KP_3+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret KP_Next+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+1);
    };
    interpret KP_4+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+0);
    };
    interpret KP_Left+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=+0);
    };
    interpret KP_6+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+0);
    };
    interpret KP_Right+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=+0);
    };
    interpret KP_7+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret KP_Home+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=-1,y=-1);
    };
    interpret KP_8+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=-1);
    };
    interpret KP_Up+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+0,y=-1);
    };
    interpret KP_9+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret KP_Prior+AnyOfOrNone(all) {
        repeat= True;
        action= MovePtr(x=+1,y=-1);
    };
    interpret KP_5+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret KP_Begin+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default);
    };
    interpret KP_F2+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret KP_Divide+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=1);
    };
    interpret KP_F3+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret KP_Multiply+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=2);
    };
    interpret KP_F4+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=3);
    };
    interpret KP_Subtract+AnyOfOrNone(all) {
        repeat= True;
        action= SetPtrDflt(affect=button,button=3);
    };
    interpret KP_Separator+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default,count=2);
    };
    interpret KP_Add+AnyOfOrNone(all) {
        repeat= True;
        action= PtrBtn(button=default,count=2);
    };
    interpret KP_0+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=lock);
    };
    interpret KP_Insert+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=lock);
    };
    interpret KP_Decimal+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=unlock);
    };
    interpret KP_Delete+AnyOfOrNone(all) {
        repeat= True;
        action= LockPtrBtn(button=default,affect=unlock);
    };
    interpret Pointer_Button_Dflt+AnyOfOrNone(all) {
        action= PtrBtn(button=default);
    };
    interpret Pointer_Button1+AnyOfOrNone(all) {
        action= PtrBtn(button=1);
    };
    interpret Pointer_Button2+AnyOfOrNone(all) {
        action= PtrBtn(button=2);
    };
    interpret Pointer_Button3+AnyOfOrNone(all) {
        action= PtrBtn(button=3);
    };
    interpret Pointer_DblClick_Dflt+AnyOfOrNone(all) {
        action= PtrBtn(button=default,count=2);
    };
    interpret Pointer_DblClick1+AnyOfOrNone(all) {
        action= PtrBtn(button=1,count=2);
    };
    interpret Pointer_DblClick2+AnyOfOrNone(all) {
        action= PtrBtn(button=2,count=2);
    };
    interpret Pointer_DblClick3+AnyOfOrNone(all) {
        action= PtrBtn(button=3,count=2);
    };
    interpret Pointer_Drag_Dflt+AnyOfOrNone(all) {
        action= LockPtrBtn(button=default,affect=both);
    };
    interpret Pointer_Drag1+AnyOfOrNone(all) {
        action= LockPtrBtn(button=1,affect=both);
    };
    interpret Pointer_Drag2+AnyOfOrNone(all) {
        action= LockPtrBtn(button=2,affect=both);
    };
    interpret Pointer_Drag3+AnyOfOrNone(all) {
        action= LockPtrBtn(button=3,affect=both);
    };
    interpret Pointer_EnableKeys+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeys);
    };
    interpret Pointer_Accelerate+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Pointer_DfltBtnNext+AnyOfOrNone(all) {
        action= SetPtrDflt(affect=button,button=+1);
    };
    interpret Pointer_DfltBtnPrev+AnyOfOrNone(all) {
        action= SetPtrDflt(affect=button,button=-1);
    };
    interpret AccessX_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXKeys);
    };
    interpret AccessX_Feedback_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXFeedback);
    };
    interpret RepeatKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=RepeatKeys);
    };
    interpret SlowKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=SlowKeys);
    };
    interpret BounceKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=BounceKeys);
    };
    interpret StickyKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=StickyKeys);
    };
    interpret MouseKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeys);
    };
    interpret MouseKeys_Accel_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Overlay1_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay1);
    };
    interpret Overlay2_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay2);
    };
    interpret AudibleBell_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AudibleBell);
    };
    interpret Terminate_Server+AnyOfOrNone(all) {
        action= Terminate();
    };
    interpret Alt_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Alt_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Meta_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Super_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Shift_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret XF86Switch_VT_1+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=1,!same);
    };
    interpret XF86Switch_VT_2+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=2,!same);
    };
    interpret XF86Switch_VT_3+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=3,!same);
    };
    interpret XF86Switch_VT_4+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=4,!same);
    };
    interpret XF86Switch_VT_5+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=5,!same);
    };
    interpret XF86Switch_VT_6+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=6,!same);
    };
    interpret XF86Switch_VT_7+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=7,!same);
    };
    interpret XF86Switch_VT_8+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=8,!same);
    };
    interpret XF86Switch_VT_9+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=9,!same);
    };
    interpret XF86Switch_VT_10+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=10,!same);
    };
    interpret XF86Switch_VT_11+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=11,!same);
    };
    interpret XF86Switch_VT_12+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=12,!same);
    };
    interpret XF86LogGrabInfo+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86LogWindowTree+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86Next_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret XF86Prev_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    group 2 = AltGr;
    group 3 = LevelThree;
    indicator "Caps Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= Lock;
    };
    indicator "Num Lock" {
       allowExplicit;
       whichModState= locked;
       modifiers= NumLock;
    };
    indicator "Scroll Lock" {
       allowExplicit;
       whichModState= locked;
       modifiers= ScrollLock;
    };
    indicator "AltGr" {
	   !allowExplicit;
       groups = 0x04;
    };
    indicator "Mode Switch" {
       !allowExplicit;
       groups = 0x02;
    };
    indicator "Mouse Keys" {
        indicatorDrivesKeyboard;
        controls= mouseKeys;
    };
};

xkb_symbols "us+math+us(altgr-intl)" {

    groupsclamp;

    key  <ESC> {
        symbols[Group1]= [          Escape,          Escape ],
        symbols[Group2]= [          U2621,           U2621 ]
    };
    key <AE01> {
        symbols[Group1]= [               1,          exclam ],
        symbols[Group2]= [         notsign,           U25B3 ],
        symbols[Group3]= [      exclamdown,     onesuperior ]
    };
    key <AE02> {
        symbols[Group1]= [               2,              at ],
        symbols[Group2]= [        emptyset,           U2286 ],
        symbols[Group3]= [     twosuperior,      dead_breve ]
    };
    key <AE03> {
        symbols[Group1]= [               3,      numbersign ],
        symbols[Group2]= [           U223D,           U2220 ],
        symbols[Group3]= [   threesuperior, dead_doubleacute ]
    };
    key <AE04> {
        symbols[Group1]= [               4,          dollar],
        symbols[Group2]= [           U221E,          U2202 ],
        symbols[Group3]= [        currency,        sterling ]
    };
    key <AE05> {
        symbols[Group1]= [               5,         percent ],
        symbols[Group2]= [           U2030,           U2294 ],
        symbols[Group3]= [           U20AC,  dead_abovering ]
    };
    key <AE06> {
        symbols[Group1]= [               6,     asciicircum ],
        symbols[Group2]= [           U2228,           U222A ],
        symbols[Group3]= [      onequarter, dead_circumflex ]
    };
    key <AE07> {
        symbols[Group1]= [               7,       ampersand ],
        symbols[Group2]= [           U2227,           U2229 ],
        symbols[Group3]= [         onehalf,      dead_caron ]
    };
    key <AE08> {
        symbols[Group1]= [               8,        asterisk ],
        symbols[Group2]= [           U2135,           U2293 ],
        symbols[Group3]= [   threequarters,     dead_ogonek ]
    };
    key <AE09> {
        symbols[Group1]= [               9,       parenleft ],
        symbols[Group2]= [           U2308,           U230A ],
        symbols[Group3]= [           U2018,   dead_abovedot ]
    };
    key <AE10> {
        symbols[Group1]= [               0,      parenright ],
        symbols[Group2]= [           U2309,           U230B ],
        symbols[Group3]= [           U2019,   dead_belowdot ]
    };
    key <AE11> {
        symbols[Group1]= [           minus,      underscore ],
        symbols[Group2]= [           U2245,           U2243 ],
        symbols[Group3]= [             yen,     dead_macron ]
    };
    key <AE12> {
        symbols[Group1]= [           equal,            plus ],
        symbols[Group2]= [           U2261,           U223C ],
        symbols[Group3]= [        multiply,        division ]
    };
    key <BKSP> {
        type= "CTRL+ALT",
        symbols[Group1]= [       BackSpace,       BackSpace,
                BackSpace,       BackSpace, Terminate_Server ]
    };
    key  <TAB> {         [             Tab,    ISO_Left_Tab ] };
    key <AD01> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               q,               Q ],
        symbols[Group2]= [           U2282,           U211A ],
        symbols[Group3]= [      adiaeresis,      Adiaeresis ]
    };
    key <AD02> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               w,               W ],
        symbols[Group2]= [     Greek_omega,     Greek_OMEGA ],
        symbols[Group3]= [           aring,           Aring ]
    };
    key <AD03> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               e,               E ],
        symbols[Group2]= [   Greek_epsilon,           U2203 ],
        symbols[Group3]= [          eacute,          Eacute ]
    };
    key <AD04> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               r,               R ],
        symbols[Group2]= [       Greek_rho,           U211D ],
        symbols[Group3]= [      registered,      registered ]
    };
    key <AD05> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               t,               T ],
        symbols[Group2]= [       Greek_tau,           U22A4 ],
        symbols[Group3]= [           thorn,           THORN ]
    };
    key <AD06> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               y,               Y ],
        symbols[Group2]= [       Greek_eta,       Greek_ETA ],
        symbols[Group3]= [      udiaeresis,      Udiaeresis ]
    };
    key <AD07> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               u,               U ],
        symbols[Group2]= [   Greek_upsilon,   Greek_UPSILON ],
        symbols[Group3]= [          uacute,          Uacute ]
    };
    key <AD08> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               i,               I ],
        symbols[Group2]= [      Greek_iota,       elementof ],
        symbols[Group3]= [          iacute,          Iacute ]
    };
    key <AD09> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               o,               O ],
        symbols[Group2]= [   Greek_omicron,    notelementof ],
        symbols[Group3]= [          oacute,          Oacute ]
    };
    key <AD10> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               p,               P ],
        symbols[Group2]= [        Greek_pi,        Greek_PI ],
        symbols[Group3]= [      odiaeresis,      Odiaeresis ]
    };
    key <AD11> {
        symbols[Group1]= [     bracketleft,       braceleft ],
        symbols[Group2]= [           U27E8,           U27E6 ],
        symbols[Group3]= [ guillemotleft, leftdoublequotemark ]
    };
    key <AD12> {
        symbols[Group1]= [    bracketright,      braceright ],
        symbols[Group2]= [           U27E9,           U27E7 ],
        symbols[Group3]= [ guillemotright, rightdoublequotemark ]
    };
    key <RTRN> {         [          Return ] };
    key <LCTL> {         [       Control_L ] };
    key <AC01> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               a,               A ],
        symbols[Group2]= [     Greek_alpha,           U2200 ],
        symbols[Group3]= [          aacute,          Aacute ]
    };
    key <AC02> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        symbols[Group1]= [               s,               S ],
        symbols[Group2]= [     Greek_sigma,     Greek_SIGMA ],
        symbols[Group3]= [          ssharp,         section ]
    };
    key <AC03> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               d,               D ],
        symbols[Group2]= [     Greek_delta,     Greek_DELTA ],
        symbols[Group3]= [             eth,             ETH ]
    };
    key <AC04> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               f,               F ],
        symbols[Group2]= [           U03C6,       Greek_PHI ],
        symbols[Group3]= [           U03D5,       Greek_PHI ]
    };
    key <AC05> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        symbols[Group1]= [               g,               G ],
        symbols[Group2]= [     Greek_gamma,     Greek_GAMMA ]
    };
    key <AC06> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        symbols[Group1]= [               h,               H ],
        symbols[Group2]= [     Greek_theta,     Greek_THETA ],
        symbols[Group3]= [           U210D,           U210D ]
    };
    key <AC07> {
        type[group1]= "ALPHABETIC",
        symbols[Group1]= [               j,               J ],
        symbols[Group2]= [           U22A6,           U22A9 ],
        symbols[Group3]= [      squareroot,      squareroot ]
    };
    key <AC08> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               k,               K ],
        symbols[Group2]= [     Greek_kappa,     Greek_KAPPA ],
        symbols[Group3]= [              oe,              OE ]
    };
    key <AC09> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               l,               L ],
        symbols[Group2]= [     Greek_lamda,     Greek_LAMDA ],
        symbols[Group3]= [          oslash,          Oslash ]
    };
    key <AC10> {
        symbols[Group1]= [       semicolon,           colon ],
        symbols[Group2]= [           U2234,         because ],
        symbols[Group3]= [       paragraph,          degree ]
    };
    key <AC11> {
        symbols[Group1]= [      apostrophe,        quotedbl ],
        symbols[Group2]= [       plusminus,           U2213 ],
        symbols[Group3]= [      dead_acute,  dead_diaeresis ]
    };
    key <TLDE> {
        symbols[Group1]= [           grave,      asciitilde ],
        symbols[Group2]= [           U2260,           U2252 ],
        symbols[Group3]= [      dead_grave,      dead_tilde ]
    };
    key <LFSH> {         [         Shift_L ] };
    key <BKSL> {
        symbols[Group1]= [       backslash,             bar ],
        symbols[Group2]= [           U2016,           U2423 ],
        symbols[Group3]= [         notsign,       brokenbar ]
    };
    key <AB01> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               z,               Z ],
        symbols[Group2]= [      Greek_zeta,           U2124 ],
        symbols[Group3]= [              ae,              AE ]
    };
    key <AB02> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        symbols[Group1]= [               x,               X ],
        symbols[Group2]= [        Greek_xi,        Greek_XI ],
        symbols[Group3]= [           U03F5,  periodcentered ]
    };
    key <AB03> {
        type[group1]= "ALPHABETIC",
        symbols[Group1]= [               c,               C ],
        symbols[Group2]= [       Greek_chi,           U2102 ],
        symbols[Group3]= [       copyright,            cent ]
    };
    key <AB04> {
        type[group1]= "ALPHABETIC",
        type[group2]= "ALPHABETIC",
        symbols[Group1]= [               v,               V ],
        symbols[Group2]= [       Greek_psi,       Greek_PSI ]
    };
    key <AB05> {
        type[group1]= "ALPHABETIC",
        symbols[Group1]= [               b,               B ],
        symbols[Group2]= [      Greek_beta,           U22A5 ]
    };
    key <AB06> {
        type[group1]= "ALPHABETIC",
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [               n,               N ],
        symbols[Group2]= [        Greek_nu,           U2115 ],
        symbols[Group3]= [          ntilde,          Ntilde ]
    };
    key <AB07> {
        type[group1]= "ALPHABETIC",
        symbols[Group1]= [               m,               M ],
        symbols[Group2]= [        Greek_mu,           U22A7 ],
        symbols[Group3]= [              mu,              mu ]
    };
    key <AB08> {
        type[group3]= "ALPHABETIC",
        symbols[Group1]= [           comma,            less ],
        symbols[Group2]= [           U2264,           U2266 ],
        symbols[Group3]= [        ccedilla,        Ccedilla ]
    };
    key <AB09> {
        symbols[Group1]= [          period,         greater ],
        symbols[Group2]= [           U2265,           U2267 ],
        symbols[Group3]= [          period,    dead_cedilla ]
    };
    key <AB10> {
        symbols[Group1]= [           slash,        question ],
        symbols[Group2]= [           U2194,           U21D4 ],
        symbols[Group3]= [    questiondown,     dead_stroke ]
    };
    key <RTSH> {         [         Shift_R ] };
    key <LALT> {         [           Alt_L,          Meta_L ] };
    key <SPCE> {         [           space,           space ] };
    key <CAPS> {         [       Control_L ] };
    key <FK01> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F1,              F1,        NoSymbol,        NoSymbol,        XF86Switch_VT_1 ],
        symbols[Group2]= [           U2460,           U2460 ]
    };
    key <FK02> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F2,              F2,        NoSymbol,        NoSymbol,        XF86Switch_VT_2 ],
        symbols[Group2]= [           U2461,           U2461 ]
    };
    key <FK03> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F3,              F3,        NoSymbol,        NoSymbol,        XF86Switch_VT_3 ],
        symbols[Group2]= [           U2462,           U2462 ]
    };
    key <FK04> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F4,              F4,        NoSymbol,        NoSymbol,        XF86Switch_VT_4 ],
        symbols[Group2]= [           U2463,           U2463 ]
    };
    key <FK05> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F5,              F5,        NoSymbol,        NoSymbol,        XF86Switch_VT_5 ],
        symbols[Group2]= [           U2464,           U2464 ]
    };
    key <FK06> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F6,              F6,        NoSymbol,        NoSymbol,        XF86Switch_VT_6 ],
        symbols[Group2]= [           U2465,           U2465 ]
    };
    key <FK07> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F7,              F7,        NoSymbol,        NoSymbol,        XF86Switch_VT_7 ],
        symbols[Group2]= [           U2466,           U2466 ]
    };
    key <FK08> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F8,              F8,        NoSymbol,        NoSymbol,        XF86Switch_VT_8 ],
        symbols[Group2]= [           U2467,           U2467 ]
    };
    key <FK09> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [              F9,              F9,        NoSymbol,        NoSymbol,        XF86Switch_VT_9 ],
        symbols[Group2]= [           U2468,           U2468 ]
    };
    key <FK10> {
        type[group1]= "CTRL+ALT",
        symbols[Group1]= [             F10,             F10,        NoSymbol,        NoSymbol,        XF86Switch_VT_10 ],
        symbols[Group2]= [           U2469,           U2469 ]
    };
    key <SCLK> {
	    type[group1]= "PC_SUPER_LEVEL2",
		symbols[Group1]= [ Num_Lock, Pause]
	};
    key <NMLK> { actions[Group1]=[RedirectKey(key=<SCLK>)] };
    key  <KP7> { actions[Group1]=[RedirectKey(key=<AD07>)] };
    key  <KP8> { actions[Group1]=[RedirectKey(key=<AE08>)] };
    key  <KP9> { actions[Group1]=[RedirectKey(key=<AE09>)] };
    key <KPDV> { actions[Group1]=[RedirectKey(key=<AE10>)] };
    key  <KP4> { actions[Group1]=[RedirectKey(key=<AD07>)] };
    key  <KP5> { actions[Group1]=[RedirectKey(key=<AD08>)] };
    key  <KP6> { actions[Group1]=[RedirectKey(key=<AD09>)] };
    key <KPMU> { actions[Group1]=[RedirectKey(key=<AD10>)] };
    key  <KP1> { actions[Group1]=[RedirectKey(key=<AC07>)] };
    key  <KP2> { actions[Group1]=[RedirectKey(key=<AC08>)] };
    key  <KP3> { actions[Group1]=[RedirectKey(key=<AC09>)] };
    key <KPSU> { actions[Group1]=[RedirectKey(key=<AC10>)] };
    key  <KP0> { actions[Group1]=[RedirectKey(key=<AB07>)] };
    key <KPDL> { actions[Group1]=[RedirectKey(key=<AB09>)] };
    key <KPAD> { actions[Group1]=[RedirectKey(key=<AB10>)] };
    key <FK11> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F11,             F11,             F11,             F11, XF86Switch_VT_11 ],
        symbols[Group2]= [           U2603,           U2603 ]
    };
    key <FK12> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F12,             F12,             F12,             F12, XF86Switch_VT_12 ]
    };
    key <KPEN> {         [        KP_Enter ] };
    key <RCTL> {         [       Control_R ] };
    key <PRSC> {
        type= "PC_ALT_LEVEL2",
        symbols[Group1]= [           Print,         Sys_Req ]
    };
    key <COMP> {
	    type[group1]= "PC_SUPER_LEVEL2",
		symbols[Group1]= [ ISO_Level3_Shift,       Multi_key ]
    };
    key <RALT> { [     Mode_switch ] };
    key <LNFD> {         [        Linefeed ] };
    key <HOME> {         [            Home ] };
    key   <UP> {
        symbols[Group1]= [              Up,              Up ],
        symbols[Group2]= [           U2191,           U21D1 ]
    };
    key <PGUP> {         [           Prior ] };
    key <LEFT> {
        symbols[Group1]= [            Left,            Left ],
        symbols[Group2]= [           U2190,           U21D0 ]
    };
    key <RGHT> {
        symbols[Group1]= [           Right,           Right ],
        symbols[Group2]= [           U2192,           U21D2 ]
    };
    key  <END> {         [             End ] };
    key <DOWN> {
        symbols[Group1]= [            Down,            Down ],
        symbols[Group2]= [           U2193,           U21D3 ]
    };
    key <PGDN> {         [            Next ] };
    key  <INS> {         [          Insert ] };
    key <DELE> {         [          Delete ] };
    key <MUTE> {         [   XF86AudioMute ] };
    key <VOL-> {         [ XF86AudioLowerVolume ] };
    key <VOL+> {         [ XF86AudioRaiseVolume ] };
    key <POWR> {         [    XF86PowerOff ] };
    key <KPEQ> {         [        KP_Equal ] };
    key <I126> {         [       plusminus ] };
    key <PAUS> {
        type= "PC_SUPER_LEVEL2",
        symbols[Group1]= [        Scroll_Lock,           Break ]
    };
    key <I128> {         [     XF86LaunchA ] };
    key <I129> {         [      KP_Decimal,      KP_Decimal ] };
    key <LWIN> {         [         Super_L ] };
    key <STOP> {         [          Cancel ] };
    key <AGAI> {         [            Redo ] };
    key <PROP> {         [        SunProps ] };
    key <UNDO> {         [            Undo ] };
    key <FRNT> {         [        SunFront ] };
    key <COPY> {         [        XF86Copy ] };
    key <OPEN> {         [        XF86Open ] };
    key <PAST> {         [       XF86Paste ] };
    key <FIND> {         [            Find ] };
    key  <CUT> {         [         XF86Cut ] };
    key <HELP> {         [            Help ] };
    key <I147> {         [      XF86MenuKB ] };
    key <I148> {         [ U2603 ] };
    key <I150> {         [       XF86Sleep ] };
    key <I151> {         [      XF86WakeUp ] };
    key <I152> {         [    XF86Explorer ] };
    key <I153> {         [        XF86Send ] };
    key <I155> {         [        XF86Xfer ] };
    key <I156> {         [     XF86Launch1 ] };
    key <I157> {         [     XF86Launch2 ] };
    key <I158> {         [         XF86WWW ] };
    key <I159> {         [         XF86DOS ] };
    key <I160> {         [ XF86ScreenSaver ] };
    key <I161> {         [ XF86RotateWindows ] };
    key <I162> {         [    XF86TaskPane ] };
    key <I163> {         [        XF86Mail ] };
    key <I164> {         [   XF86Favorites ] };
    key <I165> {         [  XF86MyComputer ] };
    key <I166> {
        symbols[Group1]= [     U25C6, U25C7 ],
        symbols[Group2]= [     XF86Back, XF86Back ]
    };
    key <I167> {
        symbols[Group1]= [     U25A0, U25A1 ],
        symbols[Group2]= [     XF86Forward, XF86Forward ]
    };
    key <I169> {         [       XF86Eject ] };
    key <I170> {         [       XF86Eject,       XF86Eject ] };
    key <I171> {         [   XF86AudioNext ] };
    key <I172> {         [   XF86AudioPlay,  XF86AudioPause ] };
    key <I173> {         [   XF86AudioPrev ] };
    key <I174> {         [   XF86AudioStop,       XF86Eject ] };
    key <I175> {         [ XF86AudioRecord ] };
    key <I176> {         [ XF86AudioRewind ] };
    key <I177> {         [       XF86Phone ] };
    key <I179> {         [       XF86Tools ] };
    key <I180> {         [    XF86HomePage ] };
    key <I181> {         [      XF86Reload ] };
    key <I182> {         [       XF86Close ] };
    key <I185> {         [    XF86ScrollUp ] };
    key <I186> {         [  XF86ScrollDown ] };
    key <I187> {         [       parenleft ] };
    key <I188> {         [      parenright ] };
    key <I189> {         [         XF86New ] };
    key <I190> {         [            Redo ] };
    key <FK13> {         [       XF86Tools ] };
    key <FK14> {         [     XF86Launch5 ] };
    key <FK15> {         [     XF86Launch6 ] };
    key <FK16> {         [     XF86Launch7 ] };
    key <FK17> {         [     XF86Launch8 ] };
    key <FK18> {         [     XF86Launch9 ] };
    key <FK20> {         [ XF86AudioMicMute ] };
    key <FK21> {         [ XF86TouchpadToggle ] };
    key <FK22> {         [  XF86TouchpadOn ] };
    key <FK23> {         [ XF86TouchpadOff ] };
    key <I208> {         [   XF86AudioPlay ] };
    key <I209> {         [  XF86AudioPause ] };
    key <I210> {         [     XF86Launch3 ] };
    key <I211> {         [     XF86Launch4 ] };
    key <I212> {         [     XF86LaunchB ] };
    key <I213> {         [     XF86Suspend ] };
    key <I214> {         [       XF86Close ] };
    key <I215> {         [   XF86AudioPlay ] };
    key <I216> {         [ XF86AudioForward ] };
    key <I218> {         [           Print ] };
    key <I220> {         [      XF86WebCam ] };
    key <I223> {         [        XF86Mail ] };
    key <I224> {         [   XF86Messenger ] };
    key <I225> {         [      XF86Search ] };
    key <I226> {         [          XF86Go ] };
    key <I227> {         [     XF86Finance ] };
    key <I228> {         [        XF86Game ] };
    key <I229> {         [        XF86Shop ] };
    key <I231> {         [          Cancel ] };
    key <I232> {         [ XF86MonBrightnessDown ] };
    key <I233> {         [ XF86MonBrightnessUp ] };
    key <I234> {         [             F19 ] };
    key <I235> {         [     XF86Display ] };
    key <I236> {         [ XF86KbdLightOnOff ] };
    key <I237> {         [ XF86KbdBrightnessDown ] };
    key <I238> {         [ XF86KbdBrightnessUp ] };
    key <I239> {         [        XF86Send ] };
    key <I240> {         [       XF86Reply ] };
    key <I241> {         [ XF86MailForward ] };
    key <I242> {         [        XF86Save ] };
    key <I243> {         [   XF86Documents ] };
    key <I244> {         [     XF86Battery ] };
    key <I245> {         [   XF86Bluetooth ] };
    key <I246> {         [        XF86WLAN ] };
    key <I254> {         [        NoSymbol ] };
    key <I255> {         [        NoSymbol ] };
    modifier_map Control { <LCTL> };
    modifier_map Shift { <LFSH> };
    modifier_map Shift { <RTSH> };
    modifier_map Mod1 { <LALT> };
    modifier_map Control { <CAPS> };
    modifier_map Control { <RCTL> };
    modifier_map Mod3 { <RALT> };
    modifier_map Mod4 { <LWIN> };
    modifier_map Mod3 { <COMP> };
    modifier_map Mod5 { <PAUS> };
    modifier_map Mod2 { <SCLK> };
};

xkb_geometry "55y9003" {

    width=       292;
    height=      140;

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

    baseColor=   "white";
    labelColor=  "black";
    xfont=       "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
    description= "55Y9003 and other Thinkpad Keyboard";

    shape "NORM" {
        corner= 1,
        { [  18,  18 ] },
        { [   2,   1 ], [  16,  16 ] }
    };
    shape "BKSP" {
        corner= 1,
        { [  38,  18 ] },
        { [   2,   1 ], [  36,  16 ] }
    };
    shape "TABK" {
        corner= 1,
        { [  28,  18 ] },
        { [   2,   1 ], [  26,  16 ] }
    };
    shape "BKSL" {
        corner= 1,
        { [  28,  18 ] },
        { [   2,   1 ], [  26,  16 ] }
    };
    shape "RTRN" {
        corner= 1,
        { [  42,  18 ] },
        { [   2,   1 ], [  40,  16 ] }
    };
    shape "CAPS" {
        corner= 1,
        { [  33,  18 ] },
        { [   2,   1 ], [  31,  16 ] }
    };
    shape "LFSH" {
        corner= 1,
        { [  43,  18 ] },
        { [   2,   1 ], [  41,  16 ] }
    };
    shape "RTSH" {
        corner= 1,
        { [  51,  18 ] },
        { [   2,   1 ], [  49,  16 ] }
    };
    shape "MODK" {
        corner= 1,
        { [  24,  18 ] },
        { [   2,   1 ], [  22,  16 ] }
    };
    shape "LSPR" {
        corner= 1,
        { [  14,  18 ] },
        { [   2,   1 ], [  12,  16 ] }
    };
    shape "SPCE" {
        corner= 1,
        { [ 98,  18 ] },
        { [   2,   1 ], [ 96,  16 ] }
    };
    shape "ESC" {
        corner= 1,
        { [ 16,  25 ] },
        { [   2,   1 ], [ 14,  23 ] }
    };
    shape "FNKY" {
        corner= 1,
        { [ 16,  12 ] },
        { [   2,   1 ], [ 14,  10 ] }
    };
    shape "ARWK" {
        corner= 1,
        { [ 16.3333,  12 ] },
        { [   2,   1 ], [ 14.3333,  10 ] }
    };
    section "Function" {
        key.color= "white";
        priority=  7;
        top=       16;
        left=      1;
        width=     351;
        height=    19;
        row {
            key.color= "grey20";
            top= -12;
            left= 1;
            keys {
                {  <ESC>,  "ESC",   1 },
                { <PRSC>, "FNKY",  148 },
                { <SCLK>, "FNKY",   1 },
                { <PAUS>, "FNKY",   1 },
                {  <INS>, "FNKY",   1 },
                { <DELE>, "ESC",    4 },
                { <HOME>, "FNKY",   1 },
                { <PGUP>, "FNKY",   1 }
        	};
        };
        row {
            top=  1;
            left= 1;
            keys {
                { <FK01>, "FNKY",  22 },
                { <FK02>, "FNKY",   1 },
                { <FK03>, "FNKY",   1 },
                { <FK04>, "FNKY",   1 },
                { <FK05>, "FNKY",   4.5 },
                { <FK06>, "FNKY",   1 },
                { <FK07>, "FNKY",   1 },
                { <FK08>, "FNKY",   1 },
                { <FK09>, "FNKY",   4.5 },
                { <FK10>, "FNKY",   1 },
                { <FK11>, "FNKY",   1 },
                { <FK12>, "FNKY",   1 },
                { <END>,  "FNKY",  21, color="grey20" },
                { <PGDN>, "FNKY",   1, color="grey20" }
            };
        };
    }; // End of "Function" section

    section "Alpha" {
        key.color= "white";
        priority=  8;
        top=       30;
        left=      1;
        width=     287;
        height=    95;
        row {
            top=  1;
            left= 1;
            keys {
                { <TLDE>, "NORM",   1 }, { <AE01>, "NORM",   1 },
                { <AE02>, "NORM",   1 }, { <AE03>, "NORM",   1 },
                { <AE04>, "NORM",   1 }, { <AE05>, "NORM",   1 },
                { <AE06>, "NORM",   1 }, { <AE07>, "NORM",   1 },
                { <AE08>, "NORM",   1 }, { <AE09>, "NORM",   1 },
                { <AE10>, "NORM",   1 }, { <AE11>, "NORM",   1 },
                { <AE12>, "NORM",   1 },
                { <BKSP>, "BKSP",   1, color="grey20" }
            };
        };
        row {
            top=  20;
            left= 1;
            keys {
                {  <TAB>, "TABK",   1, color="grey20" },
                { <AD01>, "NORM",   1 }, { <AD02>, "NORM",   1 },
                { <AD03>, "NORM",   1 }, { <AD04>, "NORM",   1 },
                { <AD05>, "NORM",   1 }, { <AD06>, "NORM",   1 },
                { <AD07>, "NORM",   1 }, { <AD08>, "NORM",   1 },
                { <AD09>, "NORM",   1 }, { <AD10>, "NORM",   1 },
                { <AD11>, "NORM",   1 }, { <AD12>, "NORM",   1 },
                { <BKSL>, "BKSL",   1 }
            };
        };
        row {
            top=  39;
            left= 1;
            keys {
                { <CAPS>, "CAPS",   1, color="grey20" },
                { <AC01>, "NORM",   1 }, { <AC02>, "NORM",   1 },
                { <AC03>, "NORM",   1 }, { <AC04>, "NORM",   1 },
                { <AC05>, "NORM",   1 }, { <AC06>, "NORM",   1 },
                { <AC07>, "NORM",   1 }, { <AC08>, "NORM",   1 },
                { <AC09>, "NORM",   1 }, { <AC10>, "NORM",   1 },
                { <AC11>, "NORM",   1 },
                { <RTRN>, "RTRN",   1, color="grey20" }
            };
        };
        row {
            top=  58;
            left= 1;
            keys {
                { <LFSH>, "LFSH",   1, color="grey20" },
                { <AB01>, "NORM",   1 },
                { <AB02>, "NORM",   1 }, { <AB03>, "NORM",   1 },
                { <AB04>, "NORM",   1 }, { <AB05>, "NORM",   1 },
                { <AB06>, "NORM",   1 }, { <AB07>, "NORM",   1 },
                { <AB08>, "NORM",   1 }, { <AB09>, "NORM",   1 },
                { <AB10>, "NORM",   1 },
                { <RTSH>, "RTSH",   1, color="grey20" }
            };
        };
        row {
            top=  77;
            left= 1;
            keys {
        	    { <FN>, "NORM", 1, color="grey20" },
                { <LCTL>, "MODK",   1, color="grey20" },
                { <LWIN>, "LSPR",   1, color="grey20" },
                { <LALT>, "NORM",   1, color="grey20" },
                { <SPCE>, "SPCE",   1 },
                { <RALT>, "NORM",   1, color="grey20" },
                { <MENU>, "NORM",   1, color="grey20" },
                { <RCTL>, "NORM",   1, color="grey20" }
            };
        };
        row {
            key.color= "grey20";
            top=  77;
            left= 253;
            keys {
                {   <UP>, "ARWK",   1 }
            };
        };
        row {
            key.color= "grey20";
            top=  90;
            left= 236;
            keys {
                { <LEFT>, "ARWK",   1 }, { <DOWN>, "ARWK",   1 },
                { <RGHT>, "ARWK",   1 }
            };
        };
    }; // End of "Alpha" section
	
	shape "STIK" { cornerRadius = 3.5, { [7, 7] } };
    solid "STIK" {
      priority = 255;
      color = "red";
      shape = "STIK";
      top = 83;
      left = 128.5;
	};
    };
};
